{
  parserClass="io.tarantool.idea.plugin.sql.parser.TarantoolGenParser"

  implements="com.intellij.sql.psi.SqlElement"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Tarantool"
  psiImplClassSuffix="Impl"
  psiPackage="io.tarantool.idea.plugin.sql.psi"
  psiImplPackage="io.tarantool.idea.plugin.sql.psi.impl"
  psiImplUtilClass="io.tarantool.idea.plugin.sql.psi.TarantoolPsiImplUtil"

  parserUtilClass="io.tarantool.idea.plugin.sql.psi.TarantoolParserUtil"
  elementTypeHolderClass="io.tarantool.idea.plugin.sql.TarantoolTypes"
  elementTypeClass="com.intellij.sql.psi.SqlElementType"
  elementTypeFactory="io.tarantool.idea.plugin.sql.TarantoolElementFactory.composite"
  tokenTypeClass="com.intellij.sql.psi.SqlTokenType"
  tokenTypeFactory="io.tarantool.idea.plugin.sql.TarantoolElementFactory.token"
}

grammar ::= statement+

statement ::= ddl_statement | dml_statement | other_statements

/*	Statements that change data definition */
ddl_statement ::=
    alter_table_statement |
    create_view_statement |
    drop_view_statement |
    create_table_statement |
    drop_table_statement |
    create_index_statement |
    drop_index_statement |
    create_trigger_statement |
    drop_trigger_statement

alter_table_statement ::=
    ALTER TABLE table-name (rename_table | add_column | add_constrain | drop_constrain | toggle_constrain)

private rename_table ::= RENAME TO new-table-name
private add_column ::= ADD COLUMN column-name column-definition
private add_constrain ::= ADD CONSTRAINT constraint-name constraint-definition
private drop_constrain ::= DROP CONSTRAINT constraint-name
private toggle_constrain ::= (ENABLE | DISABLE) CHECK CONSTRAINT constraint-name

create_view_statement ::=  /* column-list */
    CREATE VIEW (IF NOT EXISTS)? view-name [(column-list)] AS select_statement

create_table_statement ::= /* column-definition | table-constraint-list */
    CREATE TABLE (IF NOT EXISTS)? table-name (column-definition | table-constraint-list) (WITH ENGINE '=' string)?

drop_table_statement ::=
    DROP TABLE (IF NOT EXISTS)? table-name

drop_view_statement ::=
    DROP VIEW (IF EXISTS)? view-name

create_index_statement ::=
    CREATE (UNIQUE)? INDEX (IF NOT EXISTS)? index-name ON table-name (column-list)

drop_index_statement ::=
    DROP INDEX (IF EXISTS)? index-name ON table-name

drop_trigger_statement ::=
    DROP TRIGGER (IF EXISTS)? trigger-name

create_trigger_statement ::=
    CREATE TRIGGER (IF NOT EXISTS)? trigger-name 
    (BEFORE | AFTER | INSTEAD) OF 
    (DELETE | INSERT | UPDATE) ON table-name 
    FOR EACH ROW 
    (WHEN search-condition)? 
    BEGIN 
    delete_statement | insert_statement | replace_statement | select_statement | update_statement
    (';' (delete_statement | insert_statement | replace_statement | select_statement | update_statement))*
    END

dml_statement ::=
    insert_statement |
    truncate_table_statement

/* Statements that change data */
insert_statement ::=
    INSERT INTO table-name [(column-list)] (values | default_values | select_statement)

private default_values ::= DEFAULT VALUES
private values ::= VALUES expression_list (',' expression_list*)
private expression_list ::= '(' expression (',' expression)* ')'
private expression ::= 'expression'

truncate_table_statement ::= TRUNCATE TABLE table-name
delete_statement ::= DELETE FROM table-name (WHERE search-condition)?
/* 	Statements that retrieve data */
select_statement ::= 'select'

/* Statements for transactions */
other_statements ::=
    start_transaction_statement |
    commit_statement |
    savepoint_statement |
    release_savepoint_statement |
    rollback_statement |
    set_session_statement |
    pragma_statement |
    explain_statement

set_session_statement ::= SET SESSION setting-name '=' setting-value
pragma_statement ::= PRAGMA pragma-name ('(' pragma-value ')')?
explain_statement ::= EXPLAIN statement
start_transaction_statement ::= START TRANSACTION
commit_statement ::= COMMIT
savepoint_statement ::= SAVEPOINT savepoint-name
release_savepoint_statement ::= RELEASE SAVEPOINT savepoint-name
rollback_statement ::= ROLLBACK (TO SAVEPOINT? savepoint-name)?
